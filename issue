-1. star_pm.h use lots of macro that can be simplified.
   FIXUP:
2. research kernel_phys and KERNEL_PHYS in grocx bsp. We don't need them.
   Show the memory layout.
-3. why grocx implement itself loadsp and writeb.
   FIXUP: refer to pxa -> debug-macro.S
4. get_irqnr_and_base implement puzzled. Lee san may fix this.
-5. __init we need?
   FIXUP:
-6. HZ and CLK_TICK_RATE
   FIXUP: We need them. 
-7. arch_reset modify
   FIXUP: Done?
-8. whats the intend of vmalloc.c
   FIXUP: define VMALLOC_END that every mach-* need do it.
-9. consistent_dma_size -> does dma zone can be configured?
   FIXUP: Maybe not a problem since ARM dam has variable size.
-A. delete grocx_info, proc_info and debug info from patch
   FIXUP: Done.
B. zreladr/initrd_addr/kernel_addr/... meaning and usage. Necessary
   kernel_addr?
C. Fixup early_init code in grocox_setup.c. Do we really need it?

fusion

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

NOTE
----
some MACRO in ARM arch
TASK_SIZE:	maximum size of user space task
PAGE_OFFSET:	virtual address of kernel image

COMMON LAYOUT
-------------
VMALLOC_END   ~ feffffff	Free for platform use
VMALLOC_START ~ VMALLOC_END - 1 vmalloc / ioremap space
PAGE_OFFSET   ~	high_memory - 1	Kernel direct-mapped RAM region
TASK_SIZE     ~	PAGE_OFFSET - 1	Kernel module space	 
00001000      ~ TASK_SIZE - 1	User space mappings

~~~~~~~~~~~~~~~~
Booting Sequence
~~~~~~~~~~~~~~~~

1). zImage decompression
------------------------
startup in arch/arm/boot/compressed/head.S and head-*.S
decompress arch/arm/boot/compressed/misc.c

line 252
zreladdr	kernel entry point physical address (R4)
ZRELADDR	= zreladdr-y

2). ARM-specific kernel code
----------------------------

3). Processor-independent kernel code
-------------------------------------

grocx
-----
PAGE_OFFSET: 0xC0000000(virt 3G)
VMALLOC_END: PAGE_OFFSET + 0x10000000(virt)

zreladdr:    0x00008000(phys)


ARM register
------------
LR: link register(R14)
 1. store sub-routine(by bl or blx) return address. Meaning is when sub-routine finish it jump to LR's addr.
 2. for exception, jump to LR's addr.

http://blog.csdn.net/aaronychen/archive/2009/05/22/4208255.aspx
